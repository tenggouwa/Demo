《ES6标准入门》第二版阮一峰
------------------------------------
javascript高级第一章

1.对象：任何事物都是对象   动态的都叫方法，静态的都叫属性

2.类：对象的类型或者模板（ES5以下没有类的实验）

3.封装：有两层意思：1.对象包含两部分2.对象分为开发者和使用者，只关注
对象提供的功能而不关注如何去实现功能。

4.聚合：也叫组合，将现有的多个对象合并成新的对象。 
        把复杂的问题分成若干子问题

5.继承：优雅的实现代码的重用   
        子类覆盖父类称为覆写

6.多态：不同对象通过相同方法调用实现不同功能；

--------------------------------------
第二章

1.什么是面向对象？
  使用对象的时候只关注对象提供的功能，而不关注其内部实现的细节。

   为什么使用闭包：为了实现面向对象编程中的封装，
                   属性和方法都封装到对象中，
                   为了安全，用户不可以直接使用属性
                   必须通过对象提供的统一方法（接口）进行访问
                   getValue()--闭包函数
                   setValue()--设置闭包函数

2.特点：
    抽象：从现实中抓住事物重点。
    封装：不考虑内部实现，只考虑功能。
    继承：从已有对象继承出新的对象。（多重继承，多态）
    对象的组成：
        属性：变量（静态特性）
        方法：函数（动态特性）

3.原生js中对象分类：
 1）Function类型对象
  prototype原型对象
  _proto_隐世对象--指向构造器的prototype

 2）Object类型对象
  _proto_指向构造器的prototype
4.Object类型对象的创建

创建方式：
           var 对象名=new Object();
           var 对象名={};  同类型需要创建多次，麻烦
           

           使用构造器函数创建（工厂模式、混合模式）
           this代表当前触发事件的对象/代表当前对象
         js设计模式：工厂模式 原型模式 混合模式
                     1.未使用工厂模式创建对象
                       问题--代码冗余--方法无法共享--没有new
                     2.使用工厂模式创建对象--创建对象的过程封装成函数
                       问题--没有new--方法依然无法共享
                     3.改进版工厂模式 实现new
                       问题--方法无法共享
                     4.混合模式：
                        预备知识：所有函数包括构造器函数都有一个原型属性，
                                凡是放到原型属性上的属性和方法，
                                  所有通过这个构造器函数创建的对象都可以实现共享
                                    _proto_隐世属性，始终指向当前对象的构造器函数原型prototype
                     5.我们发现：同一个构造器创建的对象，属性和方法完全相同只有属性的值不同

                     6.混合模式：

js中对象的概念：对象就是无序的属性值对。




   call和applay只是后面不一样，其他都一样
 
call （对象 实参，实参，实参，...）
 
applay（对象，[数组]） 
  
 对象的继承

----------------------------------------------------
第三章

对象分类：

函数对象function 三种创建方式

    function t1(){}      typeof  tn function

    var t2=function(){}

    var t3=new Function()

普通对象object 三种创建方式

    var o1={}            typeof on object

    var o2=new Object()

    var o3=new 构造器函数()

function和object构造器函数的类型：都是function类型


关于prototype属性
    --如果是函数对象

三种函数对象的prototype是object类型

    --构造器函数的类型
Function.prototype是function类型

    --Function.prototype虽然是function类型但是没有prototype

什么是原型链？
    我们把由__proto__穿起来直到Object.prototype.__proto__为空的链条

constructor 用来引用函数对象 t1.prototype.constructor=t1

Stu.prototype.constructor==Stu
 
s1.construtor返回的是构造器 function Stu(){}

如何删除自身属性?delete 对象名.自身属性名

自身属性的优先级高于原型属性 

枚举属性：可以进行枚举，可以使用for in 进行遍历的属性

判断方法是否是枚举属性：propertyIsEnumberable()

判断是否是自身属性：hasOwnProperty()

delete只能删除自身属性，不能直接删除原型属性   
   但是可以用li.constructor.prototype.属性名 通过类进行删除


